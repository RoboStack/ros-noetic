diff --git a/src/rviz/default_plugin/interactive_markers/interactive_marker_control.h b/src/rviz/default_plugin/interactive_markers/interactive_marker_control.h
index 7f8cfbb2..9cc6aff5 100644
--- a/src/rviz/default_plugin/interactive_markers/interactive_marker_control.h
+++ b/src/rviz/default_plugin/interactive_markers/interactive_marker_control.h
@@ -32,6 +32,11 @@
 
 
 #ifndef Q_MOC_RUN
+#ifdef _WIN32
+#undef ERROR
+#undef DELETE
+#endif
+
 #include <boost/shared_ptr.hpp>
 #include <boost/enable_shared_from_this.hpp>
 
diff --git a/src/rviz/default_plugin/marker_display.cpp b/src/rviz/default_plugin/marker_display.cpp
index 79edefd7..4bcf7eef 100644
--- a/src/rviz/default_plugin/marker_display.cpp
+++ b/src/rviz/default_plugin/marker_display.cpp
@@ -43,6 +43,10 @@
 
 #include <rviz/default_plugin/marker_display.h>
 
+#ifdef DELETE
+#undef DELETE
+#endif
+
 namespace rviz
 {
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
diff --git a/src/rviz/default_plugin/marker_utils.cpp b/src/rviz/default_plugin/marker_utils.cpp
index f543b49b..288ef6f3 100644
--- a/src/rviz/default_plugin/marker_utils.cpp
+++ b/src/rviz/default_plugin/marker_utils.cpp
@@ -45,6 +45,10 @@
 #include <rviz/validate_quaternions.h>
 #include <rviz/validate_floats.h>
 
+#ifdef DELETE
+#undef DELETE
+#endif
+
 namespace rviz
 {
 MarkerBase*
diff --git a/src/rviz/yaml_config_writer.cpp b/src/rviz/yaml_config_writer.cpp
index 7fc07154..33682f5c 100644
--- a/src/rviz/yaml_config_writer.cpp
+++ b/src/rviz/yaml_config_writer.cpp
@@ -152,7 +152,9 @@ void YamlConfigWriter::writeConfigNode(const Config& config, YAML::Emitter& emit
     break;
   }
   default:
+  #ifndef _WIN32
     emitter << YAML::Null;
+  #endif
     break;
   }
 }
diff --git a/src/rviz/mesh_loader.cpp b/src/rviz/mesh_loader.cpp
index 18659169d..06d3200ce 100644
--- a/src/rviz/mesh_loader.cpp
+++ b/src/rviz/mesh_loader.cpp
@@ -768,7 +768,7 @@ Ogre::SkeletonPtr loadSkeletonFromResource(const std::string& resource_path)
     Ogre::SkeletonSerializer ser;
     Ogre::DataStreamPtr stream(new Ogre::MemoryDataStream(res.data.get(), res.size));
     Ogre::SkeletonPtr skeleton = Ogre::SkeletonManager::getSingleton().create(
-        skeleton_path.filename().c_str(), Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, true);
+        skeleton_path.filename().string().c_str(), Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME, true);
     ser.importSkeleton(stream, skeleton.get());
 
     return skeleton;

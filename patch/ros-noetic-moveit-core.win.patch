diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1aa2450ff..8eec58cbc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,17 +24,13 @@ if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
 endif()
 
-# boost::iostreams on Windows depends on boost::zlib
-if(WIN32)
-  set(EXTRA_BOOST_COMPONENTS zlib)
-endif()
 find_package(Boost REQUIRED system filesystem date_time thread iostreams regex ${EXTRA_BOOST_COMPONENTS})
 find_package(Eigen3 REQUIRED)
 
 list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/CMakeModules")
 
 # TODO: Move collision detection into separate packages
-find_package(Bullet 2.87)
+find_package(Bullet)
 
 # TODO(j-petit): Version check can be dropped when Xenial reaches end-of-life
 if(BULLET_FOUND)
@@ -47,14 +47,8 @@ else()
 endif()
 
 find_package(PkgConfig REQUIRED)
-pkg_check_modules(LIBFCL_PC REQUIRED fcl)
-set(LIBFCL_INCLUDE_DIRS ${LIBFCL_PC_INCLUDE_DIRS})
-# find *absolute* paths to LIBFCL_LIBRARIES
-set(LIBFCL_LIBRARIES)
-foreach(_lib ${LIBFCL_PC_LIBRARIES})
-  find_library(_lib_${_lib} ${_lib} HINTS ${LIBFCL_PC_LIBRARY_DIRS})
-  list(APPEND LIBFCL_LIBRARIES ${_lib_${_lib}})
-endforeach()
+find_package(fcl REQUIRED)
+set(LIBFCL_LIBRARIES "fcl")
 
 find_package(octomap REQUIRED)
 find_package(urdfdom REQUIRED)
@@ -80,6 +73,7 @@ COMPONENTS
   urdf
   visualization_msgs
   xmlrpcpp
+  pluginlib
 )
 
 set(VERSION_FILE_PATH "${CATKIN_DEVEL_PREFIX}/include")
@@ -165,7 +159,7 @@ catkin_package(
   DEPENDS
     Boost
     EIGEN3
-    LIBFCL
+    fcl
     OCTOMAP
     urdfdom
     urdfdom_headers
@@ -177,7 +171,6 @@ include_directories(SYSTEM ${catkin_INCLUDE_DIRS}
                            ${EIGEN3_INCLUDE_DIRS}
                            ${urdfdom_INCLUDE_DIRS}
                            ${urdfdom_headers_INCLUDE_DIRS}
-                           ${LIBFCL_INCLUDE_DIRS}
                            ${BULLET_INCLUDE_DIRS}
                            ${OCTOMAP_INCLUDE_DIRS}
                     )

diff --git a/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h b/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
index fdc9aec03..83696a02e 100644
--- a/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
+++ b/collision_detection/include/moveit/collision_detection/allvalid/collision_detector_allocator_allvalid.h
@@ -39,6 +39,16 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_detection/allvalid/collision_env_allvalid.h>
 
+#ifdef ROS_BUILD_SHARED_LIBS // ros is being built around shared libraries
+  #ifdef moveit_collision_detection_EXPORTS // we are building a shared lib/dll
+    #define MOVEIT_COLLISION_DETECTION_DECL ROS_HELPER_EXPORT
+  #else // we are using shared lib/dll
+    #define MOVEIT_COLLISION_DETECTION_DECL ROS_HELPER_IMPORT
+  #endif
+#else // ros is being built around static libraries
+  #define MOVEIT_COLLISION_DETECTION_DECL
+#endif
+
 namespace collision_detection
 {
 /** \brief An allocator for AllValid collision detectors */
@@ -46,6 +56,6 @@ class CollisionDetectorAllocatorAllValid
   : public CollisionDetectorAllocatorTemplate<CollisionEnvAllValid, CollisionDetectorAllocatorAllValid>
 {
 public:
-  static const std::string NAME;  // defined in collision_env_allvalid.cpp
+  MOVEIT_COLLISION_DETECTION_DECL static const std::string NAME;  // defined in collision_env_allvalid.cpp
 };
 }  // namespace collision_detection
diff --git a/collision_detection_fcl/CMakeLists.txt b/collision_detection_fcl/CMakeLists.txt
index 48bb00e6e..c2e8af108 100644
--- a/collision_detection_fcl/CMakeLists.txt
+++ b/collision_detection_fcl/CMakeLists.txt
@@ -6,7 +6,7 @@ add_library(${MOVEIT_LIB_NAME}
 )
 set_target_properties(${MOVEIT_LIB_NAME} PROPERTIES VERSION "${${PROJECT_NAME}_VERSION}")
 
-target_link_libraries(${MOVEIT_LIB_NAME} moveit_collision_detection ${catkin_LIBRARIES} ${urdfdom_LIBRARIES} ${urdfdom_headers_LIBRARIES} ${LIBFCL_LIBRARIES} ${Boost_LIBRARIES})
+target_link_libraries(${MOVEIT_LIB_NAME} moveit_collision_detection ${catkin_LIBRARIES} ${urdfdom_LIBRARIES} ${urdfdom_headers_LIBRARIES} ${LIBFCL_LIBRARIES} ${LIBCCD_LIBRARIES} ${Boost_LIBRARIES})
 add_dependencies(${MOVEIT_LIB_NAME} ${catkin_EXPORTED_TARGETS})
 
 add_library(collision_detector_fcl_plugin src/collision_detector_fcl_plugin_loader.cpp)
diff --git a/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h b/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
index fde03c4cb..3180b33da 100644
--- a/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
+++ b/collision_detection_fcl/include/moveit/collision_detection_fcl/collision_detector_allocator_fcl.h
@@ -39,6 +39,19 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_detection_fcl/collision_env_fcl.h>
 
+
+// Import/export for windows dll's and visibility for gcc shared libraries.
+
+#ifdef ROS_BUILD_SHARED_LIBS // ros is being built around shared libraries
+  #ifdef moveit_collision_detection_fcl_EXPORTS // we are building a shared lib/dll
+    #define MOVEIT_COLLISION_DETECTION_FCL_DECL ROS_HELPER_EXPORT
+  #else // we are using shared lib/dll
+    #define MOVEIT_COLLISION_DETECTION_FCL_DECL ROS_HELPER_IMPORT
+  #endif
+#else // ros is being built around static libraries
+  #define MOVEIT_COLLISION_DETECTION_FCL_DECL
+#endif
+
 namespace collision_detection
 {
 /** \brief An allocator for FCL collision detectors */
@@ -46,6 +59,6 @@ class CollisionDetectorAllocatorFCL
   : public CollisionDetectorAllocatorTemplate<CollisionEnvFCL, CollisionDetectorAllocatorFCL>
 {
 public:
-  static const std::string NAME;  // defined in collision_env_fcl.cpp
+  MOVEIT_COLLISION_DETECTION_FCL_DECL static const std::string NAME;  // defined in collision_env_fcl.cpp
 };
 }  // namespace collision_detection
diff --git a/collision_distance_field/include/moveit/collision_distance_field/collision_detector_allocator_hybrid.h b/collision_distance_field/include/moveit/collision_distance_field/collision_detector_allocator_hybrid.h
index 0e35ad38a..4b12f8d3c 100644
--- a/collision_distance_field/include/moveit/collision_distance_field/collision_detector_allocator_hybrid.h
+++ b/collision_distance_field/include/moveit/collision_distance_field/collision_detector_allocator_hybrid.h
@@ -39,6 +39,16 @@
 #include <moveit/collision_detection/collision_detector_allocator.h>
 #include <moveit/collision_distance_field/collision_env_hybrid.h>
 
+#ifdef ROS_BUILD_SHARED_LIBS // ros is being built around shared libraries
+  #ifdef moveit_collision_distance_field_EXPORTS // we are building a shared lib/dll
+    #define MOVEIT_COLLISION_DISTANCE_FIELD_DECL ROS_HELPER_EXPORT
+  #else // we are using shared lib/dll
+    #define MOVEIT_COLLISION_DISTANCE_FIELD_DECL ROS_HELPER_IMPORT
+  #endif
+#else // ros is being built around static libraries
+  #define MOVEIT_COLLISION_DISTANCE_FIELD_DECL
+#endif
+
 namespace collision_detection
 {
 /** \brief An allocator for Hybrid collision detectors */
@@ -46,6 +56,6 @@ class CollisionDetectorAllocatorHybrid
   : public CollisionDetectorAllocatorTemplate<CollisionEnvHybrid, CollisionDetectorAllocatorHybrid>
 {
 public:
-  static const std::string NAME;  // defined in collision_env_hybrid.cpp
+  MOVEIT_COLLISION_DISTANCE_FIELD_DECL static const std::string NAME;  // defined in collision_env_hybrid.cpp
 };
 }  // namespace collision_detection
diff --git a/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp b/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
index a8292a4a0..e80c32986 100644
--- a/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
+++ b/constraint_samplers/test/pr2_arm_kinematics_plugin.cpp
@@ -239,7 +239,7 @@ double computeEuclideanDistance(const std::vector<double>& array_1, const KDL::J
   {
     distance += (array_1[i] - array_2(i)) * (array_1[i] - array_2(i));
   }
-  return sqrt(distance);
+  return ::sqrt(distance);
 }
 
 void getKDLChainInfo(const KDL::Chain& chain, moveit_msgs::KinematicSolverInfo& chain_info)
diff --git a/kinematics_base/include/moveit/kinematics_base/kinematics_base.h b/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
index 5f46385b2..3ac7db90a 100644
--- a/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
+++ b/kinematics_base/include/moveit/kinematics_base/kinematics_base.h
@@ -44,6 +44,18 @@
 #include <boost/function.hpp>
 #include <string>
 
+// Import/export for windows dll's and visibility for gcc shared libraries.
+
+#ifdef ROS_BUILD_SHARED_LIBS // ros is being built around shared libraries
+  #ifdef moveit_kinematics_base_EXPORTS // we are building a shared lib/dll
+    #define MOVEIT_KINEMATICS_BASE_DECL ROS_HELPER_EXPORT
+  #else // we are using shared lib/dll
+    #define MOVEIT_KINEMATICS_BASE_DECL ROS_HELPER_IMPORT
+  #endif
+#else // ros is being built around static libraries
+  #define MOVEIT_KINEMATICS_BASE_DECL
+#endif
+
 namespace moveit
 {
 namespace core
@@ -144,8 +144,8 @@ MOVEIT_CLASS_FORWARD(KinematicsBase);  // Defines KinematicsBasePtr, ConstPtr, W
 class KinematicsBase
 {
 public:
-  static const double DEFAULT_SEARCH_DISCRETIZATION; /* = 0.1 */
-  static const double DEFAULT_TIMEOUT;               /* = 1.0 */
+  static MOVEIT_KINEMATICS_BASE_DECL const double DEFAULT_SEARCH_DISCRETIZATION; /* = 0.1 */
+  static MOVEIT_KINEMATICS_BASE_DECL const double DEFAULT_TIMEOUT;               /* = 1.0 */
 
   /** @brief Signature for a callback to validate an IK solution. Typically used for collision checking. */
   using IKCallbackFn =
diff --git a/package.xml b/package.xml
index 6703fe348..a0bc5d188 100644
--- a/package.xml
+++ b/package.xml
@@ -50,6 +50,7 @@
   <depend>trajectory_msgs</depend>
   <depend>visualization_msgs</depend>
   <depend>xmlrpcpp</depend>
+  <depend>pluginlib</depend>
 
   <test_depend>moveit_resources_panda_moveit_config</test_depend>
   <test_depend>moveit_resources_pr2_description</test_depend>
diff --git a/planning_scene/include/moveit/planning_scene/planning_scene.h b/planning_scene/include/moveit/planning_scene/planning_scene.h
index 4430d8425..f81392212 100644
--- a/planning_scene/include/moveit/planning_scene/planning_scene.h
+++ b/planning_scene/include/moveit/planning_scene/planning_scene.h
@@ -56,6 +56,18 @@
 #include <boost/concept_check.hpp>
 #include <memory>
 
+// Import/export for windows dll's and visibility for gcc shared libraries.
+
+#ifdef ROS_BUILD_SHARED_LIBS // ros is being built around shared libraries
+  #ifdef moveit_planning_scene_EXPORTS // we are building a shared lib/dll
+    #define MOVEIT_PLANNING_SCENE_DECL ROS_HELPER_EXPORT
+  #else // we are using shared lib/dll
+    #define MOVEIT_PLANNING_SCENE_DECL ROS_HELPER_IMPORT
+  #endif
+#else // ros is being built around static libraries
+  #define MOVEIT_PLANNING_SCENE_DECL
+#endif
+
 /** \brief This namespace includes the central class for representing planning contexts */
 namespace planning_scene
 {
@@ -97,8 +109,8 @@ public:
       const urdf::ModelInterfaceSharedPtr& urdf_model, const srdf::ModelConstSharedPtr& srdf_model,
       const collision_detection::WorldPtr& world = collision_detection::WorldPtr(new collision_detection::World()));
 
-  static const std::string OCTOMAP_NS;
-  static const std::string DEFAULT_SCENE_NAME;
+  static MOVEIT_PLANNING_SCENE_DECL const std::string OCTOMAP_NS;
+  static MOVEIT_PLANNING_SCENE_DECL const std::string DEFAULT_SCENE_NAME;
 
   ~PlanningScene();
 
diff --git a/robot_model/include/moveit/robot_model/fixed_joint_model.h b/robot_model/include/moveit/robot_model/fixed_joint_model.h
index 855cbec6c..2fcd20c52 100644
--- a/robot_model/include/moveit/robot_model/fixed_joint_model.h
+++ b/robot_model/include/moveit/robot_model/fixed_joint_model.h
@@ -52,7 +52,7 @@ public:
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
                                   const Bounds& other_bounds) const override;
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const Bounds& other_bounds, const double* near,
+                                        const Bounds& other_bounds, const double* _near,
                                         const double distance) const override;
   bool enforcePositionBounds(double* values, const Bounds& other_bounds) const override;
   bool satisfiesPositionBounds(const double* values, const Bounds& other_bounds, double margin) const override;
diff --git a/robot_model/include/moveit/robot_model/floating_joint_model.h b/robot_model/include/moveit/robot_model/floating_joint_model.h
index 0d0e0a60c..2304b62d1 100644
--- a/robot_model/include/moveit/robot_model/floating_joint_model.h
+++ b/robot_model/include/moveit/robot_model/floating_joint_model.h
@@ -52,7 +52,7 @@ public:
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
                                   const Bounds& other_bounds) const override;
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const Bounds& other_bounds, const double* near,
+                                        const Bounds& other_bounds, const double* _near,
                                         const double distance) const override;
   bool enforcePositionBounds(double* values, const Bounds& other_bounds) const override;
   bool satisfiesPositionBounds(const double* values, const Bounds& other_bounds, double margin) const override;
diff --git a/robot_model/include/moveit/robot_model/joint_model.h b/robot_model/include/moveit/robot_model/joint_model.h
index c0d37829e..12a7f3f24 100644
--- a/robot_model/include/moveit/robot_model/joint_model.h
+++ b/robot_model/include/moveit/robot_model/joint_model.h
@@ -256,16 +256,16 @@ public:
 
   /** \brief Provide random values for the joint variables (within default bounds). Enough memory is assumed to be
    * allocated. */
-  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* near,
+  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* _near,
                                         const double distance) const
   {
-    getVariableRandomPositionsNearBy(rng, values, variable_bounds_, near, distance);
+    getVariableRandomPositionsNearBy(rng, values, variable_bounds_, _near, distance);
   }
 
   /** \brief Provide random values for the joint variables (within specified bounds). Enough memory is assumed to be
    * allocated. */
   virtual void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                const Bounds& other_bounds, const double* near,
+                                                const Bounds& other_bounds, const double* _near,
                                                 const double distance) const = 0;
 
   /** @} */
diff --git a/robot_model/include/moveit/robot_model/joint_model_group.h b/robot_model/include/moveit/robot_model/joint_model_group.h
index 64ea874bd..3872be3e9 100644
--- a/robot_model/include/moveit/robot_model/joint_model_group.h
+++ b/robot_model/include/moveit/robot_model/joint_model_group.h
@@ -328,40 +328,40 @@ public:
   }
 
   /** \brief Compute random values for the state of the joint group */
-  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* near,
+  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* _near,
                                         const double distance) const
   {
-    getVariableRandomPositionsNearBy(rng, values, active_joint_models_bounds_, near, distance);
+    getVariableRandomPositionsNearBy(rng, values, active_joint_models_bounds_, _near, distance);
   }
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, std::vector<double>& values,
-                                        const std::vector<double>& near, double distance) const
+                                        const std::vector<double>& _near, double distance) const
   {
     values.resize(variable_count_);
-    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &near[0], distance);
+    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &_near[0], distance);
   }
 
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, std::vector<double>& values,
-                                        const std::vector<double>& near,
+                                        const std::vector<double>& _near,
                                         const std::map<JointModel::JointType, double>& distance_map) const
   {
     values.resize(variable_count_);
-    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &near[0], distance_map);
+    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &_near[0], distance_map);
   }
 
   /** \brief Compute random values for the state of the joint group */
-  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* near,
+  void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values, const double* _near,
                                         const std::vector<double>& distances) const
   {
-    getVariableRandomPositionsNearBy(rng, values, active_joint_models_bounds_, near, distances);
+    getVariableRandomPositionsNearBy(rng, values, active_joint_models_bounds_, _near, distances);
   }
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, std::vector<double>& values,
-                                        const std::vector<double>& near, const std::vector<double>& distances) const
+                                        const std::vector<double>& _near, const std::vector<double>& distances) const
   {
     values.resize(variable_count_);
-    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &near[0], distances);
+    getVariableRandomPositionsNearBy(rng, &values[0], active_joint_models_bounds_, &_near[0], distances);
   }
 
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
@@ -369,17 +369,17 @@ public:
 
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const JointBoundsVector& active_joint_bounds, const double* near,
+                                        const JointBoundsVector& active_joint_bounds, const double* _near,
                                         const double distance) const;
 
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const JointBoundsVector& active_joint_bounds, const double* near,
+                                        const JointBoundsVector& active_joint_bounds, const double* _near,
                                         const std::map<JointModel::JointType, double>& distance_map) const;
 
   /** \brief Compute random values for the state of the joint group */
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const JointBoundsVector& active_joint_bounds, const double* near,
+                                        const JointBoundsVector& active_joint_bounds, const double* _near,
                                         const std::vector<double>& distances) const;
 
   bool enforcePositionBounds(double* state) const
diff --git a/robot_model/include/moveit/robot_model/planar_joint_model.h b/robot_model/include/moveit/robot_model/planar_joint_model.h
index af71e44f4..339060252 100644
--- a/robot_model/include/moveit/robot_model/planar_joint_model.h
+++ b/robot_model/include/moveit/robot_model/planar_joint_model.h
@@ -52,7 +52,7 @@ public:
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
                                   const Bounds& other_bounds) const override;
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const Bounds& other_bounds, const double* near,
+                                        const Bounds& other_bounds, const double* _near,
                                         const double distance) const override;
   bool enforcePositionBounds(double* values, const Bounds& other_bounds) const override;
   bool satisfiesPositionBounds(const double* values, const Bounds& other_bounds, double margin) const override;
diff --git a/robot_model/include/moveit/robot_model/prismatic_joint_model.h b/robot_model/include/moveit/robot_model/prismatic_joint_model.h
index ece60ffe9..0d2e3ced5 100644
--- a/robot_model/include/moveit/robot_model/prismatic_joint_model.h
+++ b/robot_model/include/moveit/robot_model/prismatic_joint_model.h
@@ -54,7 +54,7 @@ public:
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
                                   const Bounds& other_bounds) const override;
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const Bounds& other_bounds, const double* near,
+                                        const Bounds& other_bounds, const double* _near,
                                         const double distance) const override;
   bool enforcePositionBounds(double* values, const Bounds& other_bounds) const override;
   bool satisfiesPositionBounds(const double* values, const Bounds& other_bounds, double margin) const override;
diff --git a/robot_model/include/moveit/robot_model/revolute_joint_model.h b/robot_model/include/moveit/robot_model/revolute_joint_model.h
index 9d70cf062..f885b8c0b 100644
--- a/robot_model/include/moveit/robot_model/revolute_joint_model.h
+++ b/robot_model/include/moveit/robot_model/revolute_joint_model.h
@@ -53,7 +53,7 @@ public:
   void getVariableRandomPositions(random_numbers::RandomNumberGenerator& rng, double* values,
                                   const Bounds& other_bounds) const override;
   void getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                        const Bounds& other_bounds, const double* near,
+                                        const Bounds& other_bounds, const double* _near,
                                         const double distance) const override;
   bool enforcePositionBounds(double* values, const Bounds& other_bounds) const override;
   bool satisfiesPositionBounds(const double* values, const Bounds& other_bounds, double margin) const override;
diff --git a/robot_model/src/fixed_joint_model.cpp b/robot_model/src/fixed_joint_model.cpp
index a5c8d288c..01e7205aa 100644
--- a/robot_model/src/fixed_joint_model.cpp
+++ b/robot_model/src/fixed_joint_model.cpp
@@ -60,7 +60,7 @@ void FixedJointModel::getVariableRandomPositions(random_numbers::RandomNumberGen
 }
 
 void FixedJointModel::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                       const Bounds& bounds, const double* near,
+                                                       const Bounds& bounds, const double* _near,
                                                        const double distance) const
 {
 }
diff --git a/robot_model/src/floating_joint_model.cpp b/robot_model/src/floating_joint_model.cpp
index 37d5826ee..d993b64d5 100644
--- a/robot_model/src/floating_joint_model.cpp
+++ b/robot_model/src/floating_joint_model.cpp
@@ -286,27 +286,27 @@ void FloatingJointModel::getVariableRandomPositions(random_numbers::RandomNumber
 }
 
 void FloatingJointModel::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                          const Bounds& bounds, const double* near,
+                                                          const Bounds& bounds, const double* _near,
                                                           const double distance) const
 {
   if (bounds[0].max_position_ >= std::numeric_limits<double>::infinity() ||
       bounds[0].min_position_ <= -std::numeric_limits<double>::infinity())
     values[0] = 0.0;
   else
-    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, near[0] - distance),
-                                std::min(bounds[0].max_position_, near[0] + distance));
+    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, _near[0] - distance),
+                                std::min(bounds[0].max_position_, _near[0] + distance));
   if (bounds[1].max_position_ >= std::numeric_limits<double>::infinity() ||
       bounds[1].min_position_ <= -std::numeric_limits<double>::infinity())
     values[1] = 0.0;
   else
-    values[1] = rng.uniformReal(std::max(bounds[1].min_position_, near[1] - distance),
-                                std::min(bounds[1].max_position_, near[1] + distance));
+    values[1] = rng.uniformReal(std::max(bounds[1].min_position_, _near[1] - distance),
+                                std::min(bounds[1].max_position_, _near[1] + distance));
   if (bounds[2].max_position_ >= std::numeric_limits<double>::infinity() ||
       bounds[2].min_position_ <= -std::numeric_limits<double>::infinity())
     values[2] = 0.0;
   else
-    values[2] = rng.uniformReal(std::max(bounds[2].min_position_, near[2] - distance),
-                                std::min(bounds[2].max_position_, near[2] + distance));
+    values[2] = rng.uniformReal(std::max(bounds[2].min_position_, _near[2] - distance),
+                                std::min(bounds[2].max_position_, _near[2] + distance));
 
   double da = angular_distance_weight_ * distance;
   if (da >= .25 * boost::math::constants::pi<double>())
@@ -343,10 +343,10 @@ void FloatingJointModel::getVariableRandomPositionsNearBy(random_numbers::Random
       q[3] = cos(angle / 2.0);
     }
     // multiply quaternions: near * q
-    values[3] = near[6] * q[0] + near[3] * q[3] + near[4] * q[2] - near[5] * q[1];
-    values[4] = near[6] * q[1] + near[4] * q[3] + near[5] * q[0] - near[3] * q[2];
-    values[5] = near[6] * q[2] + near[5] * q[3] + near[3] * q[1] - near[4] * q[0];
-    values[6] = near[6] * q[3] - near[3] * q[0] - near[4] * q[1] - near[5] * q[2];
+    values[3] = _near[6] * q[0] + _near[3] * q[3] + _near[4] * q[2] - _near[5] * q[1];
+    values[4] = _near[6] * q[1] + _near[4] * q[3] + _near[5] * q[0] - _near[3] * q[2];
+    values[5] = _near[6] * q[2] + _near[5] * q[3] + _near[3] * q[1] - _near[4] * q[0];
+    values[6] = _near[6] * q[3] - _near[3] * q[0] - _near[4] * q[1] - _near[5] * q[2];
   }
 }
 
diff --git a/robot_model/src/joint_model_group.cpp b/robot_model/src/joint_model_group.cpp
index b9c6685a9..b02313658 100644
--- a/robot_model/src/joint_model_group.cpp
+++ b/robot_model/src/joint_model_group.cpp
@@ -322,20 +322,20 @@ void JointModelGroup::getVariableRandomPositions(random_numbers::RandomNumberGen
 }
 
 void JointModelGroup::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                       const JointBoundsVector& active_joint_bounds, const double* near,
+                                                       const JointBoundsVector& active_joint_bounds, const double* _near,
                                                        double distance) const
 {
   assert(active_joint_bounds.size() == active_joint_model_vector_.size());
   for (std::size_t i = 0; i < active_joint_model_vector_.size(); ++i)
     active_joint_model_vector_[i]->getVariableRandomPositionsNearBy(rng, values + active_joint_model_start_index_[i],
                                                                     *active_joint_bounds[i],
-                                                                    near + active_joint_model_start_index_[i],
+                                                                    _near + active_joint_model_start_index_[i],
                                                                     distance);
   updateMimicJoints(values);
 }
 
 void JointModelGroup::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                       const JointBoundsVector& active_joint_bounds, const double* near,
+                                                       const JointBoundsVector& active_joint_bounds, const double* _near,
                                                        const std::map<JointModel::JointType, double>& distance_map) const
 {
   assert(active_joint_bounds.size() == active_joint_model_vector_.size());
@@ -350,14 +350,14 @@ void JointModelGroup::getVariableRandomPositionsNearBy(random_numbers::RandomNum
       ROS_WARN_NAMED(LOGNAME, "Did not pass in distance for '%s'", active_joint_model_vector_[i]->getName().c_str());
     active_joint_model_vector_[i]->getVariableRandomPositionsNearBy(rng, values + active_joint_model_start_index_[i],
                                                                     *active_joint_bounds[i],
-                                                                    near + active_joint_model_start_index_[i],
+                                                                    _near + active_joint_model_start_index_[i],
                                                                     distance);
   }
   updateMimicJoints(values);
 }
 
 void JointModelGroup::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                       const JointBoundsVector& active_joint_bounds, const double* near,
+                                                       const JointBoundsVector& active_joint_bounds, const double* _near,
                                                        const std::vector<double>& distances) const
 {
   assert(active_joint_bounds.size() == active_joint_model_vector_.size());
@@ -368,7 +368,7 @@ void JointModelGroup::getVariableRandomPositionsNearBy(random_numbers::RandomNum
   for (std::size_t i = 0; i < active_joint_model_vector_.size(); ++i)
     active_joint_model_vector_[i]->getVariableRandomPositionsNearBy(rng, values + active_joint_model_start_index_[i],
                                                                     *active_joint_bounds[i],
-                                                                    near + active_joint_model_start_index_[i],
+                                                                    _near + active_joint_model_start_index_[i],
                                                                     distances[i]);
   updateMimicJoints(values);
 }
diff --git a/robot_model/src/planar_joint_model.cpp b/robot_model/src/planar_joint_model.cpp
index 301edd3d6..b097f52b2 100644
--- a/robot_model/src/planar_joint_model.cpp
+++ b/robot_model/src/planar_joint_model.cpp
@@ -115,27 +115,27 @@ void PlanarJointModel::getVariableRandomPositions(random_numbers::RandomNumberGe
 }
 
 void PlanarJointModel::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                        const Bounds& bounds, const double* near,
+                                                        const Bounds& bounds, const double* _near,
                                                         const double distance) const
 {
   if (bounds[0].max_position_ >= std::numeric_limits<double>::infinity() ||
       bounds[0].min_position_ <= -std::numeric_limits<double>::infinity())
     values[0] = 0.0;
   else
-    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, near[0] - distance),
-                                std::min(bounds[0].max_position_, near[0] + distance));
+    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, _near[0] - distance),
+                                std::min(bounds[0].max_position_, _near[0] + distance));
   if (bounds[1].max_position_ >= std::numeric_limits<double>::infinity() ||
       bounds[1].min_position_ <= -std::numeric_limits<double>::infinity())
     values[1] = 0.0;
   else
-    values[1] = rng.uniformReal(std::max(bounds[1].min_position_, near[1] - distance),
-                                std::min(bounds[1].max_position_, near[1] + distance));
+    values[1] = rng.uniformReal(std::max(bounds[1].min_position_, _near[1] - distance),
+                                std::min(bounds[1].max_position_, _near[1] + distance));
 
   double da = angular_distance_weight_ * distance;
   // limit the sampling range to 2pi to work correctly even if the distance is very large
   if (da > boost::math::constants::pi<double>())
     da = boost::math::constants::pi<double>();
-  values[2] = rng.uniformReal(near[2] - da, near[2] + da);
+  values[2] = rng.uniformReal(_near[2] - da, _near[2] + da);
   normalizeRotation(values);
 }
 
diff --git a/robot_model/src/prismatic_joint_model.cpp b/robot_model/src/prismatic_joint_model.cpp
index 2f2166edb..c89d452e2 100644
--- a/robot_model/src/prismatic_joint_model.cpp
+++ b/robot_model/src/prismatic_joint_model.cpp
@@ -84,11 +84,11 @@ void PrismaticJointModel::getVariableRandomPositions(random_numbers::RandomNumbe
 }
 
 void PrismaticJointModel::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                           const Bounds& bounds, const double* near,
+                                                           const Bounds& bounds, const double* _near,
                                                            const double distance) const
 {
-  values[0] = rng.uniformReal(std::max(bounds[0].min_position_, near[0] - distance),
-                              std::min(bounds[0].max_position_, near[0] + distance));
+  values[0] = rng.uniformReal(std::max(bounds[0].min_position_, _near[0] - distance),
+                              std::min(bounds[0].max_position_, _near[0] + distance));
 }
 
 bool PrismaticJointModel::enforcePositionBounds(double* values, const Bounds& bounds) const
diff --git a/robot_model/src/revolute_joint_model.cpp b/robot_model/src/revolute_joint_model.cpp
index f3c066e0b..99bf2a737 100644
--- a/robot_model/src/revolute_joint_model.cpp
+++ b/robot_model/src/revolute_joint_model.cpp
@@ -109,17 +109,17 @@ void RevoluteJointModel::getVariableRandomPositions(random_numbers::RandomNumber
 }
 
 void RevoluteJointModel::getVariableRandomPositionsNearBy(random_numbers::RandomNumberGenerator& rng, double* values,
-                                                          const Bounds& bounds, const double* near,
+                                                          const Bounds& bounds, const double* _near,
                                                           const double distance) const
 {
   if (continuous_)
   {
-    values[0] = rng.uniformReal(near[0] - distance, near[0] + distance);
+    values[0] = rng.uniformReal(_near[0] - distance, _near[0] + distance);
     enforcePositionBounds(values, bounds);
   }
   else
-    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, near[0] - distance),
-                                std::min(bounds[0].max_position_, near[0] + distance));
+    values[0] = rng.uniformReal(std::max(bounds[0].min_position_, _near[0] - distance),
+                                std::min(bounds[0].max_position_, _near[0] + distance));
 }
 
 void RevoluteJointModel::interpolate(const double* from, const double* to, const double t, double* state) const
diff --git a/robot_state/include/moveit/robot_state/robot_state.h b/robot_state/include/moveit/robot_state/robot_state.h
index 968509fe4..f92d86754 100644
--- a/robot_state/include/moveit/robot_state/robot_state.h
+++ b/robot_state/include/moveit/robot_state/robot_state.h
@@ -1277,7 +1277,7 @@ public:
    *  corresponding value in \e near.  \distance represents meters for
    *  prismatic/postitional joints and radians for revolute/orientation joints.
    *  Resulting values are clamped within default bounds. */
-  void setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& near, double distance);
+  void setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& _near, double distance);
 
   /** \brief Set all joints in \e group to random values near the value in \near.
    *  \e distances \b MUST have the same size as \c
@@ -1286,7 +1286,7 @@ public:
    *  corresponding value in \e near.  \distance represents meters for
    *  prismatic/postitional joints and radians for revolute/orientation joints.
    *  Resulting values are clamped within default bounds. */
-  void setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& near,
+  void setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& _near,
                                   const std::vector<double>& distances);
 
   /** @} */
diff --git a/robot_state/src/robot_state.cpp b/robot_state/src/robot_state.cpp
index 010820cdb..4eed2c4a3 100644
--- a/robot_state/src/robot_state.cpp
+++ b/robot_state/src/robot_state.cpp
@@ -296,7 +296,7 @@ void RobotState::setToRandomPositions(const JointModelGroup* group, random_numbe
   updateMimicJoints(group);
 }
 
-void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& near,
+void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& _near,
                                             const std::vector<double>& distances)
 {
   // we do not make calls to RobotModel for random number generation because mimic joints
@@ -308,12 +308,12 @@ void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const
   {
     const int idx = joints[i]->getFirstVariableIndex();
     joints[i]->getVariableRandomPositionsNearBy(rng, position_ + joints[i]->getFirstVariableIndex(),
-                                                near.position_ + idx, distances[i]);
+                                                _near.position_ + idx, distances[i]);
   }
   updateMimicJoints(group);
 }
 
-void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& near, double distance)
+void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const RobotState& _near, double distance)
 {
   // we do not make calls to RobotModel for random number generation because mimic joints
   // could trigger updates outside the state of the group itself
@@ -322,7 +322,7 @@ void RobotState::setToRandomPositionsNearBy(const JointModelGroup* group, const
   for (const JointModel* joint : joints)
   {
     const int idx = joint->getFirstVariableIndex();
-    joint->getVariableRandomPositionsNearBy(rng, position_ + joint->getFirstVariableIndex(), near.position_ + idx,
+    joint->getVariableRandomPositionsNearBy(rng, position_ + joint->getFirstVariableIndex(), _near.position_ + idx,
                                             distance);
   }
   updateMimicJoints(group);

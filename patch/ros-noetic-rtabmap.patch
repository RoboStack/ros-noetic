diff --git a/CMakeLists.txt b/CMakeLists.txt
index b42fbf41..534df4f4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -83,14 +83,6 @@ IF(MINGW)
     SET(CMAKE_SHARED_LINKER_FLAGS "-Wl,--enable-auto-import")
 ENDIF(MINGW)
 
-# GCC 4 required
-IF(UNIX OR MINGW)
-    EXEC_PROGRAM( gcc ARGS "-dumpversion" OUTPUT_VARIABLE GCC_VERSION )
-    IF(GCC_VERSION VERSION_LESS "4.0.0")
-        MESSAGE(FATAL_ERROR "GCC ${GCC_VERSION} found, but version 4.x.x minimum is required")
-    ENDIF(GCC_VERSION VERSION_LESS "4.0.0")
-ENDIF(UNIX OR MINGW)
-
 #The CDT Error Parser cannot handle error messages that span 
 #more than one line, which is the default gcc behavior. 
 #In order to force gcc to generate single line error messages with no line wrapping
@@ -167,14 +159,14 @@ OPTION(BUILD_TOOLS "Build tools" ON)
 OPTION(BUILD_EXAMPLES "Build examples" ON)
 
 ####### DEPENDENCIES #######
-IF(MOBILE_BUILD)
+IF(FALSE)
 option(WITH_QT            "Include Qt support"                   OFF)
 ELSE()
 option(WITH_QT            "Include Qt support"                   ON)
 ENDIF()
 option(WITH_ORB_OCTREE    "Include ORB Octree feature support"   ON)
 option(WITH_TORCH         "Include Torch support (SuperPoint)"   OFF)
-option(WITH_PYTHON        "Include Python3 support (PyMatcher, PyDetector)"  OFF)
+option(WITH_PYTHON        "Include Python3 support (PyMatcher, PyDetector)"  ON)
 option(WITH_PYTHON_THREADING  "Use more than one Python interpreter."  OFF)
 option(WITH_PDAL          "Include PDAL support"                 ON)
 option(WITH_LIBLAS        "Include libLAS support"               OFF)
@@ -339,9 +331,9 @@ IF(WITH_QT)
     IF(QT4_FOUND OR Qt5_FOUND OR Qt6_FOUND)
         # For VCPKG build, set those global variables to off, 
         # we will enable them for jsut specific targets
-        set(CMAKE_AUTOMOC OFF)
-        set(CMAKE_AUTORCC OFF)
-        set(CMAKE_AUTOUIC OFF)
+        set(CMAKE_AUTOMOC ON)
+        set(CMAKE_AUTORCC ON)
+        set(CMAKE_AUTOUIC ON)
         IF("${VTK_MAJOR_VERSION}" EQUAL 5)
             FIND_PACKAGE(QVTK REQUIRED) # only for VTK 5
         ELSE()
@@ -386,6 +378,8 @@ IF(WITH_QT)
         ENDIF()
         ADD_DEFINITIONS(-DQT_NO_KEYWORDS) # To avoid conflicts with boost signals/foreach and Qt macros
     ENDIF(QT4_FOUND OR Qt5_FOUND OR Qt6_FOUND)
+ELSE()
+    add_compile_definitions(DISABLE_VTK)
 ENDIF(WITH_QT)
 
 IF(NOT VTK_FOUND)
diff --git a/corelib/src/CMakeLists.txt b/corelib/src/CMakeLists.txt
index 0033140b..44e540cd 100644
--- a/corelib/src/CMakeLists.txt
+++ b/corelib/src/CMakeLists.txt
@@ -241,6 +241,8 @@ IF(WITH_PYTHON AND Python3_FOUND)
 	 SET(INCLUDE_DIRS
 	    ${TORCH_INCLUDE_DIRS}
 	    ${CMAKE_CURRENT_SOURCE_DIR}/python
+		${Python3_INCLUDE_DIRS}
+		${Python3_NumPy_INCLUDE_DIRS}
 		${INCLUDE_DIRS}
 	)
 ENDIF(WITH_PYTHON AND Python3_FOUND)
diff --git a/utilite/include/rtabmap/utilite/Posix/UThreadC.h b/utilite/include/rtabmap/utilite/Posix/UThreadC.h
index e773c55f..b15a7c24 100644
--- a/utilite/include/rtabmap/utilite/Posix/UThreadC.h
+++ b/utilite/include/rtabmap/utilite/Posix/UThreadC.h
@@ -54,9 +54,9 @@ inline void uSleepNano(unsigned int ns)
 }
 
 
-#define InvalidHandle 0
-#define THREAD_HANDLE pthread_t
-
+#define InvalidHandle 0
+#define THREAD_HANDLE pthread_t
+
 typedef void *( * pthread_fn )( void * );
 
 template
@@ -116,12 +116,12 @@ class UThreadC
 
       Instance I(Param,0,Function,CancelEnable,CancelAsync);
 
-      Handle h=InvalidHandle;
-      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
-
-      pthread_attr_destroy(&attr);
-
-      if(H) *H = h;
+      Handle h=InvalidHandle;
+      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
+
+      pthread_attr_destroy(&attr);
+
+      if(H) *H = h;
       if ( !R ) S_Create().acquire();
 
 	  M_Create().unlock();
@@ -149,12 +149,12 @@ class UThreadC
 
       Instance I(Param,const_cast<UThreadC *>(this),0,CancelEnable,CancelAsync);
 
-      Handle h=InvalidHandle;
-      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
-
-      pthread_attr_destroy(&attr);
-
-      if(H) *H = h;
+      Handle h=InvalidHandle;
+      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
+
+      pthread_attr_destroy(&attr);
+
+      if(H) *H = h;
       if ( !R ) S_Create().acquire();
 
 	  M_Create().unlock();
@@ -232,7 +232,7 @@ class UThreadC<void>
     typedef THREAD_HANDLE Handle;
     typedef void ( *Handler)();
 
-    virtual ~UThreadC<void>() {}
+    virtual ~UThreadC() {}
 
   protected:
     UThreadC<void>() {}
@@ -273,12 +273,12 @@ class UThreadC<void>
 
       Instance I(0,Function,CancelEnable,CancelAsync);
 
-      Handle h=InvalidHandle;
-      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
-
-      pthread_attr_destroy(&attr);
-
-      if(H) *H = h;
+      Handle h=InvalidHandle;
+      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
+
+      pthread_attr_destroy(&attr);
+
+      if(H) *H = h;
       if ( !R ) S_Create().acquire();
 
 	  M_Create().unlock();
@@ -305,12 +305,12 @@ class UThreadC<void>
 
       Instance I(const_cast<UThreadC *>(this),0,CancelEnable,CancelAsync);
 
-      Handle h=InvalidHandle;
-      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
-
-      pthread_attr_destroy(&attr);
-
-      if(H) *H = h;
+      Handle h=InvalidHandle;
+      int R = pthread_create((pthread_t *)&h,&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
+
+      pthread_attr_destroy(&attr);
+
+      if(H) *H = h;
       if ( !R ) S_Create().acquire();
 
 	  M_Create().unlock();
@@ -338,13 +338,13 @@ class UThreadC<void>
 
       Instance I(const_cast<UThreadC *>(this),0,CancelEnable,CancelAsync);
 
-      *H = InvalidHandle;
+      *H = InvalidHandle;
       int R = pthread_create((pthread_t *)&(*H),&attr,(pthread_fn)ThreadMainHandler,(void *)&I);
-
+
       ThreadId = (unsigned long)*H;
-
-      pthread_attr_destroy(&attr);
-
+
+      pthread_attr_destroy(&attr);
+
       if ( !R ) S_Create().acquire();
 
       M_Create().unlock();

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 88d0adf..3ce0d9c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -154,22 +154,23 @@ endif(G2O_USE_OPENMP)
 
 # OpenGL is used in the draw actions for the different types, as well
 # as for creating the GUI itself
-set(OpenGL_GL_PREFERENCE "GLVND")
-find_package(OpenGL)
-
-# If OpenGL was found, use the import target if available. If not, use old-style includes
-set(G2O_USE_OPENGL ON CACHE BOOL "Build g2o with OpenGL support for visualization")
-if (OPENGL_FOUND AND G2O_USE_OPENGL)
-  if (TARGET OpenGL::GL)
-    set(G2O_OPENGL_TARGET "OpenGL::GL;OpenGL::GLU")
-  else()
-    set(G2O_OPENGL_TARGET "${OPENGL_LIBRARIES}")
-    include_directories(${OPENGL_INCLUDE_DIR})
-  endif()
-  set (G2O_HAVE_OPENGL 1)
-  message(STATUS "Compiling with OpenGL support")
-  #message(WARNING G2O_OPENGL_TARGET=${G2O_OPENGL_TARGET})
-endif()
+# set(OpenGL_GL_PREFERENCE "GLVND")
+# find_package(OpenGL)
+
+# # If OpenGL was found, use the import target if available. If not, use old-style includes
+# set(G2O_USE_OPENGL ON CACHE BOOL "Build g2o with OpenGL support for visualization")
+# if (OPENGL_FOUND AND G2O_USE_OPENGL)
+#   if (TARGET OpenGL::GL)
+#     set(G2O_OPENGL_TARGET "OpenGL::GL;OpenGL::GLU")
+#   else()
+#     set(G2O_OPENGL_TARGET "${OPENGL_LIBRARIES}")
+#     include_directories(${OPENGL_INCLUDE_DIR})
+#   endif()
+#   set (G2O_HAVE_OPENGL 1)
+#   message(STATUS "Compiling with OpenGL support")
+#   #message(WARNING G2O_OPENGL_TARGET=${G2O_OPENGL_TARGET})
+# endif()
+set (G2O_HAVE_OPENGL 0)
 
 # For building the GUI
 find_package(QGLViewer)
diff --git a/g2o/examples/sphere/create_sphere.cpp b/g2o/examples/sphere/create_sphere.cpp
index 82296da..44cc358 100644
--- a/g2o/examples/sphere/create_sphere.cpp
+++ b/g2o/examples/sphere/create_sphere.cpp
@@ -155,7 +155,7 @@ int main (int argc, char** argv)
   if (randomSeed) {
     std::random_device r;
     std::seed_seq seedSeq{r(), r(), r(), r(), r()};
-    vector<int> seeds(2);
+    vector<unsigned int> seeds(2);
     seedSeq.generate(seeds.begin(), seeds.end());
     cerr << "using seeds:";
     for (size_t i = 0; i < seeds.size(); ++i)
